plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.3-SNAPSHOT" apply false
    id "io.github.juuxel.loom-vineflower" version "1.11.0" apply false
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id "me.shedaniel.unified-publishing" version "0.1.+" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
    injectInjectables = false
}

version = rootProject.version
group = rootProject.group

subprojects {
    apply plugin: "java"
    apply plugin: "dev.architectury.loom"
    apply plugin: 'architectury-plugin'
    apply plugin: "io.github.juuxel.loom-vineflower"
    apply plugin: "maven-publish"
    apply plugin: "com.github.johnrengelman.shadow"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"

        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.layered() {
            officialMojangMappings()
            // parchment("org.parchmentmc.data:parchment-1.17.1:2021.10.10")
        }
    }


    processResources {
        outputs.upToDateWhen { false }

        filesMatching(["META-INF/mods.toml", "pack.mcmeta", "fabric.mod.json"]) {
            expand project.properties
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release.set(Integer.parseInt(rootProject.java_version))
    }

    java {
        sourceCompatibility = targetCompatibility = "${rootProject.java_version}"
        withSourcesJar()
    }


    loom {
        silentMojangMappingsLicense()
    }
}


subprojects {
    if (project.path == ':common') {
        return
    }

    configurations {
        bundle {
            canBeResolved(true)
            canBeConsumed(false)
        }

        common
        compileClasspath.extendsFrom common
        runtimeClasspath.extendsFrom common
    }

    jar {
        archiveClassifier.set "dev"
    }

    shadowJar {
        archiveClassifier.set "dev-shadow"
        configurations = [
            project.configurations.bundle
        ]
    }

    remapJar {
        dependsOn shadowJar
        inputFile.set shadowJar.archiveFile
        archiveBaseName.set "${rootProject.mod_id}-${project.name}"
        archiveClassifier.set null
    }

    sourcesJar {
        from(project(':common').sourceSets.main.allSource) {
            exclude("${mod_id}.accesswidener") // duplicate on fabric, unneeded on forge
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    ext.ENV = System.getenv()

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
//        maven {
//            // Shedaniel's maven (Architectury API)
//            url = "https://maven.architectury.dev"
//        }
//
//        maven {
//            // saps.dev Maven (KubeJS and Rhino)
//            url = "https://maven.saps.dev/minecraft"
//            content {
//                includeGroup "dev.latvian.mods"
//            }
//        }
//
//        maven {
//            // location of the maven that hosts JEI files
//            name = "Progwml6 maven"
//            url = "https://dvs1.progwml6.com/files/maven/"
//        }
//
//        maven {
//            // location of a maven mirror for JEI files, as a fallback
//            name = "ModMaven"
//            url = "https://modmaven.dev"
//        }
//
//        maven {
//            // location of FTB related dependencies.
//            url "https://maven.saps.dev/releases"
//            content {
//                includeGroup "dev.latvian.mods"
//                includeGroup "dev.ftb.mods"
//            }
//        }
//
//        // jitpack (mixinextras only)
//        maven {
//            // location of mixinextras
//            url "https://jitpack.io"
//            content {
//                includeGroup "com.github.llamalad7.mixinextras"
//            }
//        }
    }
}

tasks.register('collectJars', Copy) {
    subprojects {
        if (project.path == ":common") {
            return
        }

        def remapJar = project.tasks.named('remapJar')
        dependsOn remapJar
        from remapJar
    }

    into(buildDir.toPath().resolve("libs"))
}

assemble {
    dependsOn(collectJars)
}